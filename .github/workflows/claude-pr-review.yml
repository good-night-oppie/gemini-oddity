name: Claude PR Review Assistant

on:
  # Trigger on PR comments mentioning @claude
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  
  # Auto-review on PR open/sync
  pull_request:
    types: [opened, synchronize]
    paths:
      - "hooks/**/*.sh"
      - "test/**/*.sh"
      - "install.sh"
      - "uninstall.sh"
      - "project-uninstall.sh"

jobs:
  claude-interactive-review:
    # Run when @claude is mentioned
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))
    
    runs-on: [self-hosted, ai-dev-runner-1]  # Use self-hosted runner
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Run Claude Interactive Review
        uses: grll/claude-code-action@beta
        with:
          # Use OAuth tokens from Claude Code Max plan
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          secrets_admin_pat: ${{ secrets.SECRETS_ADMIN_PAT }}
          
          # Use Claude Opus for thorough reviews
          model: "claude-opus-4-1-20250805"
          
          timeout_minutes: "60"
          
          # Allow tool usage for testing
          allowed_tools: "Bash(shellcheck),Bash(./test/test-runner.sh),Grep,Read"

  claude-auto-review:
    # Auto-review on PR changes
    if: github.event_name == 'pull_request'
    
    runs-on: [self-hosted, ai-dev-runner-1]  # Use self-hosted runner
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Run Claude Automated Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          # Use OAuth token from Claude Code Max plan
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Use Claude Opus for thorough reviews
          model: "claude-opus-4-1-20250805"
          
          # Review prompt specialized for shell scripts
          direct_prompt: |
            Please review this Pull Request for the Gemini Oddity project.
            
            Focus on:
            1. **Shell Script Quality**:
               - POSIX compliance and bash best practices
               - Proper error handling and exit codes
               - Correct quoting and variable expansion
               - Security issues (command injection, path traversal)
            
            2. **Hook System Integration**:
               - Correct JSON parsing and generation
               - Proper hook lifecycle management
               - Error propagation and fallback behavior
            
            3. **Installation & Configuration**:
               - Cross-platform compatibility (macOS/Linux)
               - Dependency checking and validation
               - Path handling and file permissions
            
            4. **Testing**:
               - Test coverage for new functionality
               - Edge cases and error scenarios
               - Integration test requirements
            
            5. **Performance**:
               - Efficient file operations
               - Cache usage and cleanup
               - Avoiding unnecessary API calls
            
            Provide specific, actionable feedback with code examples where helpful.
            Be constructive and explain the "why" behind suggestions.
          
          # Use sticky comments for iterative reviews
          use_sticky_comment: true
          
          # Tools for validation
          allowed_tools: "Bash(shellcheck),Grep,Read"

  shellcheck-validation:
    # Run shellcheck on all shell scripts
    if: github.event_name == 'pull_request'
    
    runs-on: [self-hosted, ai-dev-runner-1]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install shellcheck if needed
        run: |
          if ! command -v shellcheck &> /dev/null; then
            echo "Installing shellcheck..."
            # Download shellcheck binary directly (no sudo required)
            scversion="stable"
            wget -qO- "https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz" | tar -xJv
            mkdir -p "$HOME/.local/bin"
            cp "shellcheck-${scversion}/shellcheck" "$HOME/.local/bin/"
            export PATH="$HOME/.local/bin:$PATH"
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
      
      - name: Run shellcheck
        run: |
          # Ensure PATH includes local bin directory if shellcheck was installed there
          export PATH="$HOME/.local/bin:$PATH"
          
          echo "Running shellcheck on all shell scripts..."
          find . -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck -S warning "$script" || true
          done
      
      - name: Comment shellcheck results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ ShellCheck found issues in the shell scripts. Please review the logs.'
            })