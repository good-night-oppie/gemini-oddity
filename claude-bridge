#!/bin/bash
# ABOUTME: Claude-Gemini Bridge CLI for easy management

# Claude-Gemini Bridge CLI
# Provides easy command-line interface for bridge management

set -euo pipefail

# Version and paths
CLI_VERSION="2.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BRIDGE_REGISTRY="$HOME/.claude/bridge-registry.json"
BRIDGE_STATUS_LOG="$HOME/.claude/bridge-status.log"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
DIM='\033[2m'
BOLD='\033[1m'
NC='\033[0m'

# Show help
show_help() {
    echo -e "${BOLD}Claude-Gemini Bridge CLI v$CLI_VERSION${NC}"
    echo ""
    echo "Usage: claude-bridge <command> [options]"
    echo ""
    echo "Commands:"
    echo "  install              Install bridge in current directory"
    echo "  uninstall            Remove bridge from current directory"
    echo "  status               Show bridge and OAuth status"
    echo "  list                 List all registered projects"
    echo "  enable [path]        Enable bridge for project"
    echo "  disable [path]       Disable bridge for project"
    echo "  auth-status          Check Gemini OAuth status"
    echo "  auth-setup           Setup Gemini OAuth"
    echo "  auth-refresh         Refresh OAuth token"
    echo "  logs                 Show recent bridge activity"
    echo "  config               Show/edit configuration"
    echo "  test                 Test bridge functionality"
    echo "  version              Show version information"
    echo "  help                 Show this help message"
    echo ""
    echo "Environment Variables:"
    echo "  CLAUDE_BRIDGE_NOTIFY  Notification level (quiet|subtle|verbose|debug)"
    echo "  DEBUG                 Enable debug output (0|1)"
}

# Install bridge
cmd_install() {
    if [[ -f "$SCRIPT_DIR/scripts/install-bridge.sh" ]]; then
        bash "$SCRIPT_DIR/scripts/install-bridge.sh" install
    else
        echo -e "${RED}‚ùå Installer not found${NC}"
        echo "Please run from the claude-gemini-bridge directory"
        exit 1
    fi
}

# Uninstall bridge
cmd_uninstall() {
    local project_dir="${1:-$(pwd)}"
    
    if [[ -f "$project_dir/.claude-gemini-bridge/uninstall.sh" ]]; then
        bash "$project_dir/.claude-gemini-bridge/uninstall.sh"
    else
        echo -e "${YELLOW}‚ö†Ô∏è No bridge installation found in $project_dir${NC}"
    fi
}

# Show status
cmd_status() {
    echo -e "${BOLD}Claude-Gemini Bridge Status${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Check bridge components
    echo ""
    echo "Components:"
    
    # Universal router
    if [[ -f "$HOME/.claude/hooks/universal-router.sh" ]]; then
        echo -e "  ${GREEN}‚úÖ${NC} Universal router installed"
    else
        echo -e "  ${RED}‚ùå${NC} Universal router not installed"
    fi
    
    # Registry
    if [[ -f "$BRIDGE_REGISTRY" ]]; then
        local project_count=$(jq -r '.projects | length' "$BRIDGE_REGISTRY" 2>/dev/null || echo "0")
        echo -e "  ${GREEN}‚úÖ${NC} Registry active ($project_count projects)"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è${NC} Registry not initialized"
    fi
    
    # OAuth status
    echo ""
    echo "Authentication:"
    if command -v gemini &>/dev/null; then
        echo -e "  ${GREEN}‚úÖ${NC} Gemini CLI installed"
        
        # Check OAuth
        if [[ -f "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" ]]; then
            local oauth_info=$(bash "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" info)
            echo -e "  üìç OAuth: $oauth_info"
        fi
    else
        echo -e "  ${RED}‚ùå${NC} Gemini CLI not found"
    fi
    
    # Current project
    echo ""
    echo "Current Directory:"
    local current_dir="$(pwd)"
    if [[ -d "$current_dir/.claude-gemini-bridge" ]]; then
        echo -e "  ${GREEN}‚úÖ${NC} Bridge installed here"
        
        # Check if registered
        if [[ -f "$BRIDGE_REGISTRY" ]]; then
            local is_registered=$(jq --arg dir "$current_dir" '.projects[$dir] // null' "$BRIDGE_REGISTRY")
            if [[ "$is_registered" != "null" ]]; then
                local enabled=$(echo "$is_registered" | jq -r '.config.enabled')
                local tools=$(echo "$is_registered" | jq -r '.config.tools')
                echo -e "  üìç Status: ${enabled:-unknown}"
                echo -e "  üîß Tools: ${tools:-none}"
            else
                echo -e "  ${YELLOW}‚ö†Ô∏è${NC} Not registered in global registry"
            fi
        fi
    else
        echo -e "  ${DIM}No bridge installation${NC}"
    fi
    
    # Recent activity
    if [[ -f "$BRIDGE_STATUS_LOG" ]]; then
        echo ""
        echo "Recent Activity:"
        tail -5 "$BRIDGE_STATUS_LOG" 2>/dev/null | while read line; do
            echo -e "  ${DIM}$line${NC}"
        done
    fi
}

# List projects
cmd_list() {
    echo -e "${BOLD}Registered Projects${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ ! -f "$BRIDGE_REGISTRY" ]]; then
        echo -e "${DIM}No projects registered${NC}"
        return
    fi
    
    local projects=$(jq -r '.projects | to_entries[] | 
        "\(.key)|\(.value.bridge_version)|\(.value.config.enabled)|\(.value.config.tools)"' \
        "$BRIDGE_REGISTRY" 2>/dev/null)
    
    if [[ -z "$projects" ]]; then
        echo -e "${DIM}No projects registered${NC}"
    else
        echo ""
        while IFS='|' read -r path version enabled tools; do
            local status_icon="‚úÖ"
            [[ "$enabled" != "true" ]] && status_icon="‚è∏Ô∏è"
            
            echo -e "  $status_icon $(basename "$path")"
            echo -e "     ${DIM}Path: $path${NC}"
            echo -e "     ${DIM}Version: v$version | Tools: $tools${NC}"
            echo ""
        done <<< "$projects"
    fi
}

# Enable/disable project
cmd_enable() {
    local project_dir="${1:-$(pwd)}"
    update_project_status "$project_dir" "true"
    echo -e "${GREEN}‚úÖ Bridge enabled for $project_dir${NC}"
}

cmd_disable() {
    local project_dir="${1:-$(pwd)}"
    update_project_status "$project_dir" "false"
    echo -e "${YELLOW}‚è∏Ô∏è Bridge disabled for $project_dir${NC}"
}

update_project_status() {
    local project_dir="$1"
    local enabled="$2"
    
    if [[ ! -f "$BRIDGE_REGISTRY" ]]; then
        echo -e "${RED}‚ùå No registry found${NC}"
        return 1
    fi
    
    local temp_registry=$(mktemp)
    jq --arg dir "$project_dir" --arg enabled "$enabled" \
       '(.projects[$dir].config.enabled) = ($enabled == "true")' \
       "$BRIDGE_REGISTRY" > "$temp_registry"
    
    mv "$temp_registry" "$BRIDGE_REGISTRY"
}

# OAuth commands
cmd_auth_status() {
    if [[ -f "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" ]]; then
        bash "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" test
    else
        echo -e "${RED}‚ùå OAuth manager not found${NC}"
    fi
}

cmd_auth_setup() {
    if [[ -f "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" ]]; then
        bash "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" setup
    else
        echo -e "${RED}‚ùå OAuth manager not found${NC}"
    fi
}

cmd_auth_refresh() {
    if [[ -f "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" ]]; then
        bash "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" refresh
    else
        echo -e "${RED}‚ùå OAuth manager not found${NC}"
    fi
}

# Show logs
cmd_logs() {
    local lines="${1:-20}"
    
    echo -e "${BOLD}Bridge Activity Log${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ -f "$BRIDGE_STATUS_LOG" ]]; then
        echo ""
        tail -"$lines" "$BRIDGE_STATUS_LOG"
    else
        echo -e "${DIM}No activity log found${NC}"
    fi
}

# Configuration
cmd_config() {
    echo -e "${BOLD}Bridge Configuration${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    echo "Notification Level: ${CLAUDE_BRIDGE_NOTIFY:-subtle}"
    echo "Debug Mode: ${DEBUG:-0}"
    echo "Registry: $BRIDGE_REGISTRY"
    echo "Status Log: $BRIDGE_STATUS_LOG"
    echo ""
    echo "To change notification level:"
    echo "  export CLAUDE_BRIDGE_NOTIFY=verbose"
    echo ""
    echo "Options: quiet | subtle | verbose | debug"
}

# Test functionality
cmd_test() {
    echo -e "${BOLD}Testing Bridge Components${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # Test universal router
    echo -n "Universal Router: "
    if [[ -f "$HOME/.claude/hooks/universal-router.sh" ]]; then
        if bash "$HOME/.claude/hooks/universal-router.sh" --status >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Working${NC}"
        else
            echo -e "${RED}‚ùå Error${NC}"
        fi
    else
        echo -e "${RED}‚ùå Not installed${NC}"
    fi
    
    # Test OAuth
    echo -n "OAuth Manager: "
    if [[ -f "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" ]]; then
        local oauth_status=$(bash "$SCRIPT_DIR/hooks/lib/oauth-manager.sh" check)
        case "$oauth_status" in
            valid) echo -e "${GREEN}‚úÖ Valid${NC}" ;;
            expired) echo -e "${YELLOW}‚ö†Ô∏è Expired${NC}" ;;
            not_authenticated) echo -e "${RED}‚ùå Not authenticated${NC}" ;;
            *) echo -e "${YELLOW}‚ö†Ô∏è Unknown${NC}" ;;
        esac
    else
        echo -e "${RED}‚ùå Not found${NC}"
    fi
    
    # Test Gemini
    echo -n "Gemini CLI: "
    if command -v gemini &>/dev/null; then
        if gemini -p "test" -q "Say OK" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Working${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Installed but not working${NC}"
        fi
    else
        echo -e "${RED}‚ùå Not installed${NC}"
    fi
}

# Version
cmd_version() {
    echo -e "${BOLD}Claude-Gemini Bridge${NC}"
    echo "CLI Version: $CLI_VERSION"
    
    if [[ -f "$BRIDGE_REGISTRY" ]]; then
        local router_version=$(jq -r '.version // "unknown"' "$BRIDGE_REGISTRY")
        echo "Router Version: $router_version"
    fi
}

# Main command handler
main() {
    local command="${1:-help}"
    shift || true
    
    case "$command" in
        install)
            cmd_install "$@"
            ;;
        uninstall)
            cmd_uninstall "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        enable)
            cmd_enable "$@"
            ;;
        disable)
            cmd_disable "$@"
            ;;
        auth-status)
            cmd_auth_status "$@"
            ;;
        auth-setup)
            cmd_auth_setup "$@"
            ;;
        auth-refresh)
            cmd_auth_refresh "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        test)
            cmd_test "$@"
            ;;
        version|--version|-v)
            cmd_version "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}Unknown command: $command${NC}"
            echo "Run 'claude-bridge help' for usage"
            exit 1
            ;;
    esac
}

# Run main
main "$@"